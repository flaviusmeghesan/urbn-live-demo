name: Deploy

on:
  push:
    branches:
      - main
 
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Check for Node project
        id: check_node
        run: |
          if [ -f package.json ]; then
            echo "has_node=true" >> "$GITHUB_ENV"
          else
            echo "has_node=false" >> "$GITHUB_ENV"
          fi

      - name: Setup Node (if needed)
        if: env.has_node == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install & build (if needed)
        if: env.has_node == 'true'
        run: |
          # Prefer npm ci when lockfile exists (faster & reproducible), else fallback to npm install
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

          # Run build if script exists
          if npm run | grep -q " build"; then
            npm run build
          fi

      - name: Prepare production files
        run: |
          # If build produced ./dist use it. Otherwise copy public files into ./dist for publishing.
          if [ -d ./dist ]; then
            echo "Using existing ./dist"
          else
            echo "No ./dist found â€” copying repository files into ./dist"
            mkdir -p ./dist
            # copy all site files but avoid Git metadata and workflow files
            shopt -s dotglob || true
            for f in * .*; do
              case "$f" in
                .|..|.git|.github)
                  continue
                  ;;
              esac
              cp -r "$f" ./dist/ || true
            done
          fi

      - name: Upload production-ready build files
        uses: actions/upload-artifact@v4
        with:
          name: production-files
          path: ./dist

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: production-files
          path: ./dist

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist